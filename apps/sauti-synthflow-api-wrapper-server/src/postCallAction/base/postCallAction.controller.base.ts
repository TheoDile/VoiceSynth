/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostCallActionService } from "../postCallAction.service";
import { PostCallActionCreateInput } from "./PostCallActionCreateInput";
import { PostCallAction } from "./PostCallAction";
import { PostCallActionFindManyArgs } from "./PostCallActionFindManyArgs";
import { PostCallActionWhereUniqueInput } from "./PostCallActionWhereUniqueInput";
import { PostCallActionUpdateInput } from "./PostCallActionUpdateInput";

export class PostCallActionControllerBase {
  constructor(protected readonly service: PostCallActionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostCallAction })
  async createPostCallAction(
    @common.Body() data: PostCallActionCreateInput
  ): Promise<PostCallAction> {
    return await this.service.createPostCallAction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostCallAction] })
  @ApiNestedQuery(PostCallActionFindManyArgs)
  async postCallActions(
    @common.Req() request: Request
  ): Promise<PostCallAction[]> {
    const args = plainToClass(PostCallActionFindManyArgs, request.query);
    return this.service.postCallActions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostCallAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postCallAction(
    @common.Param() params: PostCallActionWhereUniqueInput
  ): Promise<PostCallAction | null> {
    const result = await this.service.postCallAction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostCallAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostCallAction(
    @common.Param() params: PostCallActionWhereUniqueInput,
    @common.Body() data: PostCallActionUpdateInput
  ): Promise<PostCallAction | null> {
    try {
      return await this.service.updatePostCallAction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostCallAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostCallAction(
    @common.Param() params: PostCallActionWhereUniqueInput
  ): Promise<PostCallAction | null> {
    try {
      return await this.service.deletePostCallAction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
