/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, VoiceAssistant as PrismaVoiceAssistant } from "@prisma/client";

export class VoiceAssistantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VoiceAssistantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.voiceAssistant.count(args);
  }

  async voiceAssistants<T extends Prisma.VoiceAssistantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoiceAssistantFindManyArgs>
  ): Promise<PrismaVoiceAssistant[]> {
    return this.prisma.voiceAssistant.findMany<Prisma.VoiceAssistantFindManyArgs>(
      args
    );
  }
  async voiceAssistant<T extends Prisma.VoiceAssistantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoiceAssistantFindUniqueArgs>
  ): Promise<PrismaVoiceAssistant | null> {
    return this.prisma.voiceAssistant.findUnique(args);
  }
  async createVoiceAssistant<T extends Prisma.VoiceAssistantCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoiceAssistantCreateArgs>
  ): Promise<PrismaVoiceAssistant> {
    return this.prisma.voiceAssistant.create<T>(args);
  }
  async updateVoiceAssistant<T extends Prisma.VoiceAssistantUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoiceAssistantUpdateArgs>
  ): Promise<PrismaVoiceAssistant> {
    return this.prisma.voiceAssistant.update<T>(args);
  }
  async deleteVoiceAssistant<T extends Prisma.VoiceAssistantDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoiceAssistantDeleteArgs>
  ): Promise<PrismaVoiceAssistant> {
    return this.prisma.voiceAssistant.delete(args);
  }
}
