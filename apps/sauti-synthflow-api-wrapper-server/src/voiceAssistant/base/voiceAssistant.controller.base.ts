/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VoiceAssistantService } from "../voiceAssistant.service";
import { VoiceAssistantCreateInput } from "./VoiceAssistantCreateInput";
import { VoiceAssistant } from "./VoiceAssistant";
import { VoiceAssistantFindManyArgs } from "./VoiceAssistantFindManyArgs";
import { VoiceAssistantWhereUniqueInput } from "./VoiceAssistantWhereUniqueInput";
import { VoiceAssistantUpdateInput } from "./VoiceAssistantUpdateInput";

export class VoiceAssistantControllerBase {
  constructor(protected readonly service: VoiceAssistantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoiceAssistant })
  async createVoiceAssistant(
    @common.Body() data: VoiceAssistantCreateInput
  ): Promise<VoiceAssistant> {
    return await this.service.createVoiceAssistant({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VoiceAssistant] })
  @ApiNestedQuery(VoiceAssistantFindManyArgs)
  async voiceAssistants(
    @common.Req() request: Request
  ): Promise<VoiceAssistant[]> {
    const args = plainToClass(VoiceAssistantFindManyArgs, request.query);
    return this.service.voiceAssistants({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoiceAssistant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async voiceAssistant(
    @common.Param() params: VoiceAssistantWhereUniqueInput
  ): Promise<VoiceAssistant | null> {
    const result = await this.service.voiceAssistant({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoiceAssistant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVoiceAssistant(
    @common.Param() params: VoiceAssistantWhereUniqueInput,
    @common.Body() data: VoiceAssistantUpdateInput
  ): Promise<VoiceAssistant | null> {
    try {
      return await this.service.updateVoiceAssistant({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoiceAssistant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVoiceAssistant(
    @common.Param() params: VoiceAssistantWhereUniqueInput
  ): Promise<VoiceAssistant | null> {
    try {
      return await this.service.deleteVoiceAssistant({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
